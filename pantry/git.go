// Package pantry - Generated by go generate generate.go
// Created on 2019-02-04 23:32:46.273133 -0800 PST m=+0.004532641
package pantry

import (
	"fmt"
	"os"
	"path"
	"strings"

	"github.com/hashicorp/hcl2/hcl"
	"github.com/hashicorp/hcl2/hcldec"
	"github.com/mikemackintosh/bakery/cli"
	homedir "github.com/mitchellh/go-homedir"
	"github.com/zclconf/go-cty/cty"
	git "gopkg.in/src-d/go-git.v4"
	"gopkg.in/src-d/go-git.v4/plumbing"
)

// Git is a git object
type Git struct {
	PantryItem
	Name        string   `hcl:"name,label"`
	Config      hcl.Body `hcl:",remain"`
	Source      string   `json:"source"`
	Destination *string  `json:"destination"`
	Branch      *string  `json:"branch"`
	Recursive   bool     `json:"recursive"`
	DependsOn   []string `json:"depends_on"`
}

// Identifies the git spec
var gitSpec = &hcldec.ObjectSpec{
	"depends_on": dependsOn,
	"source": &hcldec.AttrSpec{
		Name:     "source",
		Required: true,
		Type:     cty.String,
	},
	"destination": &hcldec.AttrSpec{
		Name:     "destination",
		Required: false,
		Type:     cty.String,
	},
	"branch": &hcldec.AttrSpec{
		Name:     "branch",
		Required: false,
		Type:     cty.String,
	},
	"recursive": &hcldec.AttrSpec{
		Name:     "recursive",
		Required: false,
		Type:     cty.Bool,
	},
}

// Parse the confgiuration with the provided spec
func (p *Git) Parse(evalContext *hcl.EvalContext) error {
	cli.Debug(cli.INFO, "Preparing git", p.Name)
	cfg, diags := hcldec.Decode(p.Config, gitSpec, evalContext)
	if len(diags) != 0 {
		for _, diag := range diags {
			cli.Debug(cli.INFO, "\t#", diag)
		}
		return fmt.Errorf("%s", diags.Errs()[0])
	}

	err := p.Populate(cfg, p)
	if err != nil {
		return err
	}

	return nil
}

// Bake will action the configuration
func (p *Git) Bake() {
	var destination string
	if p.Destination != nil {
		destination = *p.Destination
	} else {
		destination = path.Base(strings.Replace(".git", "", p.Source, -1))
	}

	destination, err := homedir.Expand(destination)
	if err != nil {
		cli.Debug(cli.ERROR, "\t-> Error cloning: ", err)
	}

	var options = &git.CloneOptions{
		URL:      p.Source,
		Progress: os.Stdout,
	}

	if p.Branch != nil && len(*p.Branch) > 0 {
		options.ReferenceName = plumbing.NewBranchReferenceName(*p.Branch)
	}

	if p.Recursive {
		options.RecurseSubmodules = git.DefaultSubmoduleRecursionDepth
	}

	_, err = git.PlainClone(destination, false, options)
	if err != nil {
		cli.Debug(cli.ERROR, "\t-> Error cloning: ", err)
	}
}
