// Package pantry - Generated by go generate generate.go
// Created on 2019-02-04 23:32:46.273133 -0800 PST m=+0.004532641
package pantry

import (
	"fmt"
	"path"
	"strings"

	"github.com/hashicorp/hcl2/hcl"
	"github.com/hashicorp/hcl2/hcldec"
	"github.com/mikemackintosh/bakery/cli"
	homedir "github.com/mitchellh/go-homedir"
	"github.com/zclconf/go-cty/cty"
)

// Git is a git object
type Git struct {
	PantryItem
	Source      string  `json:"source"`
	Destination *string `json:"destination"`
	Path        *string `json:"path"`
	Branch      *string `json:"branch"`
	Recursive   bool    `json:"recursive"`
}

// Identifies the git spec
var gitSpec = NewPantrySpec(&hcldec.ObjectSpec{
	"source": &hcldec.AttrSpec{
		Name:     "source",
		Required: true,
		Type:     cty.String,
	},
	"destination": &hcldec.AttrSpec{
		Name:     "destination",
		Required: false,
		Type:     cty.String,
	},
	"branch": &hcldec.AttrSpec{
		Name:     "branch",
		Required: false,
		Type:     cty.String,
	},
	"recursive": &hcldec.AttrSpec{
		Name:     "recursive",
		Required: false,
		Type:     cty.Bool,
	},
	"path": &hcldec.AttrSpec{
		Name:     "path",
		Required: false,
		Type:     cty.String,
	},
})

// Parse the confgiuration with the provided spec
func (p *Git) Parse(evalContext *hcl.EvalContext) error {
	cli.Debug(cli.INFO, "Preparing git", p.Name)
	cfg, diags := hcldec.Decode(p.Config, gitSpec, evalContext)
	if len(diags) != 0 {
		for _, diag := range diags {
			cli.Debug(cli.INFO, "\t#", diag)
		}
		return fmt.Errorf("%s", diags.Errs()[0])
	}

	err := p.Populate(cfg, p)
	if err != nil {
		return err
	}

	return nil
}

// Bake will action the configuration
func (p *Git) Bake() {
	var destination string
	if p.Destination != nil {
		destination = *p.Destination
	} else {
		destination = path.Base(strings.Replace(".git", "", p.Source, -1))
	}

	destination, err := homedir.Expand(destination)
	if err != nil {
		cli.Debug(cli.ERROR, "\t-> Error cloning: ", err)
	}

	// If the target directory already exists, we can't install the repo
	if FileExists(destination) {
		cli.Debug(cli.INFO, "\t-> Directory already exists", nil)
		return
	}

	var gitBin = "git"
	if p.Path != nil {
		gitBin = *p.Path
	}

	gitCmd := []string{
		gitBin,
		"clone",
		"--progress",
		p.Source,
		destination,
	}
	// If we want a specific branch, set it here
	if p.Branch != nil && len(*p.Branch) > 0 {
		gitCmd = append(gitCmd, []string{"-b", *p.Branch}...)
	}

	if p.Recursive {
		gitCmd = append(gitCmd, "--recursive")
	}
	var o *CommandResponse
	if p.User != nil {

		uid, gid, err := GetUIDAndGID(*p.User)
		if err != nil {
			cli.Debug(cli.ERROR, fmt.Sprintf("Error getting user data, %s", err), err)
		}

		o, err = RunCommandAsUser(gitCmd, uid, gid)
		if err != nil {
			cli.Debug(cli.ERROR, fmt.Sprintf("Error running %s", err), nil)
		}

	} else {

		o, err = RunCommand(gitCmd)
		if err != nil {
			cli.Debug(cli.ERROR, fmt.Sprintf("Error running %s", err), nil)
		}
	}
	fmt.Printf("%+v", o)
	/*
		// Set the default options
		var options = &git.CloneOptions{
			URL:      p.Source,
			Progress: os.Stdout,
		}
	*/

	/*
		_, err = git.PlainClone(destination, false, options)
		if err != nil {
			cli.Debug(cli.ERROR, "\t-> Error cloning: ", err)
		}
	*/

}
