// Package pantry - Generated by go generate generate.go
// Created on 2019-02-10 21:29:01.046415 -0800 PST m=+0.007074593
package pantry

import (
	"fmt"
	"os"
	"strconv"

	"github.com/hashicorp/hcl2/hcl"
	"github.com/hashicorp/hcl2/hcldec"
	"github.com/mikemackintosh/bakery/cli"
	"github.com/zclconf/go-cty/cty"
)

var brewBin = "/usr/local/bin/brew"

// Brew is a brew object
type Brew struct {
	PantryItem
	Name   string   `hcl:"name,label"`
	Config hcl.Body `hcl:",remain"`
	Action string   `json:"action"`
}

// Identifies the brew spec
var brewSpec = NewPantrySpec(&hcldec.ObjectSpec{
	"action": &hcldec.AttrSpec{
		Name:     "action",
		Required: true,
		Type:     cty.String,
	},
})

// Parse the confgiuration with the provided spec
func (p *Brew) Parse(evalContext *hcl.EvalContext) error {
	cli.Debug(cli.INFO, "Preparing brew", p.Name)
	cfg, diags := hcldec.Decode(p.Config, brewSpec, evalContext)
	if len(diags) != 0 {
		for _, diag := range diags {
			cli.Debug(cli.INFO, "\t#", diag)
		}
		return fmt.Errorf("%s", diags.Errs()[0])
	}

	err := p.Populate(cfg, p)
	if err != nil {
		return err
	}

	return nil
}

// Bake will action the configuration
func (p *Brew) Bake() {
	//
	if !FileExists(brewBin) {
		cli.Debug(cli.ERROR, "Missing Brew Dependency", nil)
		return
	}

	var verb string
	switch p.Action {
	case "install":
		verb = "install"
	case "upgrade":
		verb = "upgrade"
	case "remove":
		verb = "remove"
	default:
		fmt.Printf("Please provide a valid verb")
		return
	}

	uid, _ := strconv.ParseUint(os.Getenv("SUDO_UID"), 10, 64)
	gid, _ := strconv.ParseUint(os.Getenv("SUDO_GID"), 10, 64)
	var brewCmd = []string{brewBin, verb, p.Name}
	o, err := RunCommandAsUser(brewCmd, uint32(uid), uint32(gid))
	if err != nil {
		cli.Debug(cli.ERROR, err.Error(), nil)
	}

	cli.Debug(cli.INFO, "\t-> Output:", o)
}
