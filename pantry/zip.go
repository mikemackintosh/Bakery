// Package pantry - Generated by go generate generate.go
// Created on 2019-02-04 22:45:38.88347 -0800 PST m=+0.002939462
package pantry

import (
	"archive/zip"
	"fmt"
	"io"
	"net/url"
	"os"
	"path"
	"path/filepath"
	"strings"

	"github.com/hashicorp/hcl2/hcl"
	"github.com/hashicorp/hcl2/hcldec"
	"github.com/mikemackintosh/bakery/cli"
	"github.com/mikemackintosh/bakery/config"
	"github.com/zclconf/go-cty/cty"
)

// Zip is a zip object
type Zip struct {
	PantryItem
	Name        string   `hcl:"name,label"`
	Config      hcl.Body `hcl:",remain"`
	Source      string   `json:"source"`
	Checksum    *string  `json:"checksum"`
	Destination string   `json:"destination"`
}

// Identifies the zip spec
var zipSpec = NewPantrySpec(&hcldec.ObjectSpec{
	"source": &hcldec.AttrSpec{
		Name:     "source",
		Required: true,
		Type:     cty.String,
	},
	"destination": &hcldec.AttrSpec{
		Name:     "destination",
		Required: true,
		Type:     cty.String,
	},
	"checksum": &hcldec.AttrSpec{
		Name:     "checksum",
		Required: false,
		Type:     cty.String,
	},
})

// Parse the confgiuration with the provided spec
func (p *Zip) Parse(evalContext *hcl.EvalContext) error {
	cli.Debug(cli.INFO, "Preparing zip", p.Name)
	cfg, diags := hcldec.Decode(p.Config, zipSpec, evalContext)
	if len(diags) != 0 {
		for _, diag := range diags {
			cli.Debug(cli.INFO, "\t#", diag)
		}
		return fmt.Errorf("%s", diags.Errs()[0])
	}

	err := p.Populate(cfg, p)
	if err != nil {
		return err
	}

	return nil
}

// Bake will action the configuration
func (p *Zip) Bake() {
	u, err := url.Parse(p.Source)
	if err != nil {
		cli.Debug(cli.INFO, fmt.Sprintf("Error finding source %s", p.Source), err)
	}

	var tmpFile string
	if u.Scheme == "http" || u.Scheme == "https" {
		cli.Debug(cli.DEBUG, "\t-> Using HTTP(s) source for download", nil)

		urlParse, urlErr := url.Parse(p.Source)
		if err != nil {
			cli.Debug(cli.INFO, fmt.Sprintf("Error finding source %s", p.Source), urlErr)
		}

		tmpFile = config.Registry.TempDir + "/" + path.Base(urlParse.Path)
		urlErr = DownloadFile(p.Source, tmpFile, p.Checksum)
		if urlErr != nil {
			cli.Debug(cli.INFO, fmt.Sprintf("Error downloading file %s", p.Source), urlErr)
		}
	}

	_, err = Unzip(tmpFile, p.Destination)
	if err != nil {
		cli.Debug(cli.ERROR, "\t-> Error unzipping file:", err)
	}
}

// Unzip will unzip the source to the destination
func Unzip(src string, dest string) ([]string, error) {
	var filenames []string

	r, err := zip.OpenReader(src)
	if err != nil {
		return filenames, err
	}
	defer r.Close()

	for _, f := range r.File {
		rc, err := f.Open()
		if err != nil {
			return filenames, err
		}
		defer rc.Close()

		// Store filename/path for returning and using later on
		fpath := filepath.Join(dest, f.Name)

		// Check for ZipSlip. More Info: http://bit.ly/2MsjAWE
		if !strings.HasPrefix(fpath, filepath.Clean(dest)+string(os.PathSeparator)) {
			return filenames, fmt.Errorf("%s: illegal file path", fpath)
		}

		filenames = append(filenames, fpath)
		if f.FileInfo().IsDir() {
			// Make Folder
			os.MkdirAll(fpath, os.ModePerm)
		} else {
			// Make File
			if err = os.MkdirAll(filepath.Dir(fpath), os.ModePerm); err != nil {
				return filenames, err
			}

			outFile, err := os.OpenFile(fpath, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, f.Mode())
			if err != nil {
				return filenames, err
			}

			_, err = io.Copy(outFile, rc)

			// Close the file without defer to close before next iteration of loop
			outFile.Close()
			if err != nil {
				return filenames, err
			}
		}
	}
	return filenames, nil
}
