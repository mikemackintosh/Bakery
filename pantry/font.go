// Package pantry - Generated by go generate generate.go
// Created on 2019-02-04 22:45:38.88347 -0800 PST m=+0.002939462
package pantry

import (
	"fmt"
	"net/url"
	"path"

	"github.com/hashicorp/hcl2/hcl"
	"github.com/hashicorp/hcl2/hcldec"
	"github.com/mikemackintosh/bakery/cli"
	"github.com/mikemackintosh/bakery/config"
	"github.com/zclconf/go-cty/cty"
)

// Zip is a zip object
type Font struct {
	PantryItem
	Source      string  `json:"source"`
	Checksum    *string `json:"checksum"`
	Destination string  `json:"destination"`
}

// Identifies the font spec
var fontSpec = NewPantrySpec(&hcldec.ObjectSpec{
	"source": &hcldec.AttrSpec{
		Name:     "source",
		Required: true,
		Type:     cty.String,
	},
	"checksum": &hcldec.AttrSpec{
		Name:     "checksum",
		Required: false,
		Type:     cty.String,
	},
})

// Parse the confgiuration with the provided spec
func (p *Font) Parse(evalContext *hcl.EvalContext) error {
	cli.Debug(cli.INFO, "Preparing font", p.Name)
	cfg, diags := hcldec.Decode(p.Config, fontSpec, evalContext)
	if len(diags) != 0 {
		for _, diag := range diags {
			cli.Debug(cli.INFO, "\t#", diag)
		}
		return fmt.Errorf("%s", diags.Errs()[0])
	}

	err := p.Populate(cfg, p)
	if err != nil {
		return err
	}

	return nil
}

// Bake will action the configuration
func (p *Font) Bake() {
	u, err := url.Parse(p.Source)
	if err != nil {
		cli.Debug(cli.ERROR, fmt.Sprintf("Error finding source %s", p.Source), err)
	}

	var tmpFile string
	if u.Scheme == ProtocolHTTP || u.Scheme == ProtocolHTTPS {
		cli.Debug(cli.DEBUG, "\t-> Using HTTP(s) source for download", nil)

		urlParse, urlErr := url.Parse(p.Source)
		if err != nil {
			cli.Debug(cli.INFO, fmt.Sprintf("Error finding source %s", p.Source), urlErr)
		}

		tmpFile = config.Registry.TempDir + "/" + path.Base(urlParse.Path)
		urlErr = DownloadFile(p.Source, tmpFile, p.Checksum)
		if urlErr != nil {
			cli.Debug(cli.INFO, fmt.Sprintf("Error downloading file %s", p.Source), urlErr)
		}
	}

	_, err = Unzip(tmpFile, "/Library/Fonts/")
	if err != nil {
		cli.Debug(cli.ERROR, "\t-> Error unzipping file:", err)
	}
}
